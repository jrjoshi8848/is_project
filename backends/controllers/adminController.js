import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import { User } from '../models/userModel.js';
import { generateOTPForAdmin, verifyOTP } from '../utils/mfa.js';

export const loginAdmin = async (req, res) => {
  const { email, password } = req.body;
  try {
    // Find admin by email
    const user = await User.findOne({ where: { email, role: 'admin' } });

    // Check if admin exists and password is correct
    if (!user || !(await bcrypt.compare(password, user.password))) {
      return res.status(401).json({ message: 'Invalid credentials' });
    }

    // Step 1: Generate and send OTP to the admin
    const otpResponse = await generateOTPForAdmin(user.id);
    if (otpResponse.message === 'OTP sent successfully') {
      return res.status(200).json({ message: 'OTP sent successfully. Please enter the OTP to proceed.' });
    }

    res.status(500).json({ message: 'Error sending OTP' });
  } catch (error) {
    res.status(500).json({ message: 'Error logging in admin', error });
  }
};

// Function to verify the OTP and generate the JWT token if OTP is valid
export const verifyAdminOTP = async (req, res) => {
  const { email, otpCode } = req.body;

  try {
    // Find admin by email
    const user = await User.findOne({ where: { email, role: 'admin' } });
    if (!user) {
      return res.status(404).json({ message: 'Admin not found' });
    }

    // Step 2: Verify the OTP entered by the admin
    const otpVerification = await verifyOTP(user.id, otpCode);

    if (!otpVerification.valid) {
      return res.status(400).json({ message: otpVerification.message });
    }

    // Step 3: Generate JWT token for admin after successful OTP verification
    const token = jwt.sign({ id: user.id, role: user.role }, process.env.JWT_SECRET, {
      expiresIn: '1h',
    });

    // Set the JWT token in cookies
    res.cookie('jwt', token, {
      httpOnly: true, // Prevent access from JavaScript
      secure: process.env.NODE_ENV === 'production', // Set secure flag in production
      sameSite: 'Strict', // Protect against CSRF attacks
      maxAge: 3600000, // 1 hour in milliseconds
    });

    // Send CSRF token as a cookie (generated by csrfProtection middleware)
    res.cookie('csrfToken', req.csrfToken(), {
      httpOnly: false, // Allow JavaScript access to CSRF token
      secure: process.env.NODE_ENV === 'production', // Set secure flag in production
      sameSite: 'Strict', // SameSite protection
    });

    res.status(200).json({ message: 'Admin login successful' });
  } catch (error) {
    res.status(500).json({ message: 'Error verifying OTP for admin', error });
  }
};